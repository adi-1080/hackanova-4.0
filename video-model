{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"name":"Meso-4.ipynb","provenance":[],"collapsed_sections":[]},"accelerator":"GPU","kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":6945939,"sourceType":"datasetVersion","datasetId":3989137},{"sourceId":10818426,"sourceType":"datasetVersion","datasetId":6716974},{"sourceId":10818467,"sourceType":"datasetVersion","datasetId":6716999},{"sourceId":10818477,"sourceType":"datasetVersion","datasetId":6717008},{"sourceId":139211,"sourceType":"modelInstanceVersion","modelInstanceId":117881,"modelId":141117},{"sourceId":139339,"sourceType":"modelInstanceVersion","modelInstanceId":117997,"modelId":141233},{"sourceId":139614,"sourceType":"modelInstanceVersion","modelInstanceId":116854,"modelId":140072},{"sourceId":167029,"sourceType":"modelInstanceVersion","modelInstanceId":142122,"modelId":164709},{"sourceId":167046,"sourceType":"modelInstanceVersion","modelInstanceId":142136,"modelId":164721}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/adi1080/my-project?scriptVersionId=224588580\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"45+4","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:41:24.282167Z","iopub.execute_input":"2025-02-26T10:41:24.282444Z","iopub.status.idle":"2025-02-26T10:41:24.287832Z","shell.execute_reply.started":"2025-02-26T10:41:24.282424Z","shell.execute_reply":"2025-02-26T10:41:24.286908Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"49"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"import os\nimport torch\nimport cv2\nimport numpy as np\nfrom torchvision import transforms\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision.io import read_video\nimport random\n\n# Define Constants\nIMG_SIZE = 224\nFRAMES_PER_VIDEO = 10  # Extract 10 frames per video\nBATCH_SIZE = 8\nEPOCHS = 10\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Data Transformations\ntransform = transforms.Compose([\n    transforms.Resize((IMG_SIZE, IMG_SIZE)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.5], std=[0.5])\n])\n\n# Frame Extraction Function\ndef extract_frames(video_path, num_frames=FRAMES_PER_VIDEO):\n    frames, _, _ = read_video(video_path, pts_unit='sec')\n    frames = frames.permute(0, 3, 1, 2).float() / 255.0  # Normalize\n    if len(frames) < num_frames:\n        return None  # Skip short videos\n    frame_indices = np.linspace(0, len(frames) - 1, num_frames, dtype=int)\n    selected_frames = frames[frame_indices]\n    return selected_frames\n\n# Custom Dataset Class\nclass DeepFakeDataset(Dataset):\n    def __init__(self, video_paths, labels, transform=None):\n        self.video_paths = video_paths\n        self.labels = labels\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.video_paths)\n\n    def __getitem__(self, idx):\n        video_path = self.video_paths[idx]\n        label = self.labels[idx]\n        frames = extract_frames(video_path)\n        if frames is None:\n            return self.__getitem__(random.randint(0, len(self.video_paths) - 1))  # Skip empty samples\n        if self.transform:\n            frames = torch.stack([self.transform(frame) for frame in frames])\n        return frames, torch.tensor(label, dtype=torch.long)\n\n# Load Dataset (Assuming Folder Structure: dataset/real/ & dataset/fake/)\nreal_videos = [\"/kaggle/input/1000-videos-split/1000_videos/train/fake\" + f for f in os.listdir(\"/kaggle/input/1000-videos-split/1000_videos/train/fake\")]\nfake_videos = [\"/kaggle/input/1000-videos-split/1000_videos/train/real\" + f for f in os.listdir(\"/kaggle/input/1000-videos-split/1000_videos/train/real\")]\n\nvideo_paths = real_videos + fake_videos\nlabels = [0] * len(real_videos) + [1] * len(fake_videos)  # 0 = Real, 1 = Fake\n\n# Shuffle Data\ncombined = list(zip(video_paths, labels))\nrandom.shuffle(combined)\nvideo_paths, labels = zip(*combined)\n\n# Train-Test Split\nsplit = int(0.8 * len(video_paths))\ntrain_videos, test_videos = video_paths[:split], video_paths[split:]\ntrain_labels, test_labels = labels[:split], labels[split:]\n\n# Create Dataloaders\ntrain_dataset = DeepFakeDataset(train_videos, train_labels, transform)\ntest_dataset = DeepFakeDataset(test_videos, test_labels, transform)\ntrain_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)\n\nprint(f\"Loaded {len(train_dataset)} training videos and {len(test_dataset)} testing videos.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:41:24.29209Z","iopub.execute_input":"2025-02-26T10:41:24.292293Z","iopub.status.idle":"2025-02-26T10:41:30.511992Z","shell.execute_reply.started":"2025-02-26T10:41:24.292276Z","shell.execute_reply":"2025-02-26T10:41:30.511195Z"}},"outputs":[{"name":"stdout","text":"Loaded 9306 training videos and 2327 testing videos.\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"%pip install av","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:41:30.513144Z","iopub.execute_input":"2025-02-26T10:41:30.513621Z","iopub.status.idle":"2025-02-26T10:41:36.552301Z","shell.execute_reply.started":"2025-02-26T10:41:30.513587Z","shell.execute_reply":"2025-02-26T10:41:36.55133Z"}},"outputs":[{"name":"stdout","text":"Collecting av\n  Downloading av-14.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.6 kB)\nDownloading av-14.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (38.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m38.8/38.8 MB\u001b[0m \u001b[31m48.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: av\nSuccessfully installed av-14.2.0\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import torch.nn as nn\nfrom transformers import SwinForImageClassification\n\n# Define Model\nclass SwinDeepFakeDetector(nn.Module):\n    def __init__(self, num_classes=2):\n        super(SwinDeepFakeDetector, self).__init__()\n        self.swin = SwinForImageClassification.from_pretrained(\"microsoft/swin-large-patch4-window7-224\")\n        self.fc1 = nn.Linear(1536, 512)  # Swin-large feature size\n        self.fc2 = nn.Linear(512, num_classes)\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(0.3)\n\n    def forward(self, x):\n        batch_size, frames, c, h, w = x.shape\n        x = x.view(batch_size * frames, c, h, w)  # Flatten batch\n        features = self.swin(x).logits  # Extract features\n        features = features.view(batch_size, frames, -1).mean(dim=1)  # Average over frames\n        x = self.relu(self.fc1(features))\n        x = self.dropout(x)\n        x = self.fc2(x)\n        return x\n\n# Initialize Model\nmodel = SwinDeepFakeDetector().to(DEVICE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:41:36.55447Z","iopub.execute_input":"2025-02-26T10:41:36.554702Z","iopub.status.idle":"2025-02-26T10:42:16.868945Z","shell.execute_reply.started":"2025-02-26T10:41:36.554682Z","shell.execute_reply":"2025-02-26T10:42:16.867625Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/71.8k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cd9a2b361f1f4eb2bbca6c550249403b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/787M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e5e56c2a942c4eb1848203c43d206b93"}},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"import torch\ntorch.backends.cudnn.enabled = False  # Disable CuDNN for RNNs to avoid backward error\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch.utils.data import Dataset, DataLoader\nimport os\nimport cv2\nimport numpy as np\nfrom tqdm import tqdm\n\n# Device Configuration\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Hyperparameters\nEPOCHS = 10\nLEARNING_RATE = 1e-4\nBATCH_SIZE = 8\nFRAMES_PER_VIDEO = 8  # Number of frames to group per sample\nIMAGE_SIZE = (128,128)  # Resize images\n\n# Transformation for images\ntransform = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Resize(IMAGE_SIZE),\n    transforms.Normalize(mean=[0.5], std=[0.5])  # Normalize images\n])\n\n# Custom Dataset for Frame-Based Videos\nclass FrameDataset(Dataset):\n    def __init__(self, root_dir, label):\n        self.root_dir = root_dir\n        self.label = label\n        self.video_groups = self.group_frames()\n\n    def group_frames(self):\n        frame_dict = {}\n        for filename in sorted(os.listdir(self.root_dir)):\n            if filename.endswith(\".png\"):\n                video_id = \"_\".join(filename.split(\"_\")[:-1])  # Extract video ID prefix\n                if video_id not in frame_dict:\n                    frame_dict[video_id] = []\n                frame_dict[video_id].append(os.path.join(self.root_dir, filename))\n        \n        # Keep only videos with enough frames\n        return {k: v for k, v in frame_dict.items() if len(v) >= FRAMES_PER_VIDEO}\n\n    def __len__(self):\n        return len(self.video_groups)\n\n    def __getitem__(self, idx):\n        video_id = list(self.video_groups.keys())[idx]\n        frame_paths = self.video_groups[video_id][:FRAMES_PER_VIDEO]  # Select required frames\n        \n        frames = []\n        for frame_path in frame_paths:\n            img = cv2.imread(frame_path)\n            if img is None:\n                continue  # Skip corrupted images\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            img = transform(img)\n            frames.append(img)\n\n        if len(frames) < FRAMES_PER_VIDEO:\n            return self.__getitem__(np.random.randint(0, len(self)))  # Skip if not enough frames\n\n        frames = torch.stack(frames)  # Shape: [FRAMES_PER_VIDEO, C, H, W]\n        return frames, torch.tensor(self.label, dtype=torch.long)\n\n# Load datasets\nreal_dataset = FrameDataset(\"/kaggle/input/1000-videos-split/1000_videos/train/real\", label=0)\nfake_dataset = FrameDataset(\"/kaggle/input/1000-videos-split/1000_videos/train/fake\", label=1)\n\ntrain_dataset = torch.utils.data.ConcatDataset([real_dataset, fake_dataset])\n# train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4)\n\n# # Define Model (Example CNN + LSTM for sequence processing)\nclass VideoClassifier(nn.Module):\n    def __init__(self):\n        super(VideoClassifier, self).__init__()\n        self.conv = nn.Sequential(\n            nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2)\n        )\n        # Correct input size for LSTM: 128 * 32 * 32 = 131072\n        self.lstm = nn.LSTM(128 * 32 * 32, 256, batch_first=True)\n        self.fc = nn.Linear(256, 2)  # Output: Real or Fake\n\n    def forward(self, x):\n        B, T, C, H, W = x.shape\n        x = x.view(B * T, C, H, W)  # Combine batch and time dimensions\n        x = self.conv(x)  # Apply convolutional layers\n        x = x.view(B, T, -1)  # Reshape to [Batch, Time, Features]\n        _, (hn, _) = self.lstm(x)  # Pass through LSTM\n        out = self.fc(hn[-1])  # Take last LSTM output\n        return out\n\n# Model, Loss & Optimizer\nmodel = VideoClassifier().to(DEVICE)\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n\n# Training Function\ndef train_model(model, train_loader, optimizer, criterion, epochs=EPOCHS):\n    model.train()\n    for epoch in range(epochs):\n        epoch_loss = 0\n        correct = 0\n        total = 0\n        loop = tqdm(train_loader, leave=True)\n\n        for videos, labels in loop:\n            videos, labels = videos.to(DEVICE), labels.to(DEVICE)\n\n            optimizer.zero_grad()\n            outputs = model(videos)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n\n            epoch_loss += loss.item()\n            _, predicted = outputs.max(1)\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n            loop.set_description(f\"Epoch [{epoch+1}/{epochs}]\")\n            loop.set_postfix(loss=loss.item(), acc=100 * correct / total)\n\n        print(f\"Epoch {epoch+1}: Loss = {epoch_loss / len(train_loader):.4f}, Accuracy = {100 * correct / total:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:42:16.871121Z","iopub.execute_input":"2025-02-26T10:42:16.871696Z","iopub.status.idle":"2025-02-26T10:42:18.184056Z","shell.execute_reply.started":"2025-02-26T10:42:16.871668Z","shell.execute_reply":"2025-02-26T10:42:18.183139Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# Load datasets\ntrain_real_dataset = FrameDataset(\"/kaggle/input/1000-videos-split/1000_videos/train/real\", label=0)\ntrain_fake_dataset = FrameDataset(\"/kaggle/input/1000-videos-split/1000_videos/train/fake\", label=1)\n\nval_real_dataset = FrameDataset(\"/kaggle/input/1000-videos-split/1000_videos/validation/real\", label=0)\nval_fake_dataset = FrameDataset(\"/kaggle/input/1000-videos-split/1000_videos/validation/fake\", label=1)\n\n# Combine datasets\ntrain_dataset = torch.utils.data.ConcatDataset([train_real_dataset, train_fake_dataset])\nval_dataset = torch.utils.data.ConcatDataset([val_real_dataset, val_fake_dataset])\n\n# Data loaders\ntrain_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4)\nval_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:42:18.185091Z","iopub.execute_input":"2025-02-26T10:42:18.185339Z","iopub.status.idle":"2025-02-26T10:42:18.327252Z","shell.execute_reply.started":"2025-02-26T10:42:18.185317Z","shell.execute_reply":"2025-02-26T10:42:18.326308Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Train Model\ntrain_model(model, train_loader, optimizer, criterion)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:42:18.328266Z","iopub.execute_input":"2025-02-26T10:42:18.328564Z","iopub.status.idle":"2025-02-26T10:45:07.547961Z","shell.execute_reply.started":"2025-02-26T10:42:18.32854Z","shell.execute_reply":"2025-02-26T10:45:07.546819Z"}},"outputs":[{"name":"stderr","text":"Epoch [1/10]: 100%|██████████| 93/93 [00:19<00:00,  4.70it/s, acc=56.1, loss=0.674]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1: Loss = 0.6882, Accuracy = 56.08%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [2/10]: 100%|██████████| 93/93 [00:16<00:00,  5.58it/s, acc=64.2, loss=1.38] \n","output_type":"stream"},{"name":"stdout","text":"Epoch 2: Loss = 0.6333, Accuracy = 64.19%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [3/10]: 100%|██████████| 93/93 [00:16<00:00,  5.60it/s, acc=73.8, loss=0.502]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 3: Loss = 0.5481, Accuracy = 73.78%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [4/10]: 100%|██████████| 93/93 [00:16<00:00,  5.61it/s, acc=80.3, loss=0.477]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 4: Loss = 0.4592, Accuracy = 80.27%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [5/10]: 100%|██████████| 93/93 [00:16<00:00,  5.61it/s, acc=83, loss=0.298]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 5: Loss = 0.4065, Accuracy = 82.97%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [6/10]: 100%|██████████| 93/93 [00:16<00:00,  5.62it/s, acc=85.3, loss=0.425]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 6: Loss = 0.3731, Accuracy = 85.27%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [7/10]: 100%|██████████| 93/93 [00:16<00:00,  5.60it/s, acc=88.5, loss=0.334]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 7: Loss = 0.3241, Accuracy = 88.51%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [8/10]: 100%|██████████| 93/93 [00:16<00:00,  5.61it/s, acc=88.8, loss=0.319] \n","output_type":"stream"},{"name":"stdout","text":"Epoch 8: Loss = 0.3118, Accuracy = 88.78%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [9/10]: 100%|██████████| 93/93 [00:16<00:00,  5.60it/s, acc=92.3, loss=0.0688]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 9: Loss = 0.2555, Accuracy = 92.30%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [10/10]: 100%|██████████| 93/93 [00:16<00:00,  5.60it/s, acc=92, loss=0.624]   ","output_type":"stream"},{"name":"stdout","text":"Epoch 10: Loss = 0.2333, Accuracy = 92.03%\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# Training Function\ndef train_model(model, train_loader, val_loader, optimizer, criterion, epochs=EPOCHS):\n    model.train()\n    for epoch in range(epochs):\n        epoch_loss = 0\n        correct = 0\n        total = 0\n        loop = tqdm(train_loader, leave=True)\n        \n        for videos, labels in loop:\n            videos, labels = videos.to(DEVICE), labels.to(DEVICE)\n\n            optimizer.zero_grad()\n            outputs = model(videos)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n\n            epoch_loss += loss.item()\n            _, predicted = outputs.max(1)\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n            loop.set_description(f\"Epoch [{epoch+1}/{epochs}]\")\n            loop.set_postfix(loss=loss.item(), acc=100 * correct / total)\n\n        train_accuracy = 100 * correct / total\n        train_loss = epoch_loss / len(train_loader)\n\n        # Validation Step\n        val_loss, val_accuracy = validate_model(model, val_loader, criterion)\n\n        print(f\"Epoch {epoch+1}: Train Loss = {train_loss:.4f}, Train Accuracy = {train_accuracy:.2f}%, \"\n              f\"Val Loss = {val_loss:.4f}, Val Accuracy = {val_accuracy:.2f}%, Learning Rate = {optimizer.param_groups[0]['lr']:.6f}\")\n\n# Validation Function\ndef validate_model(model, val_loader, criterion):\n    model.eval()\n    val_loss = 0\n    correct = 0\n    total = 0\n\n    with torch.no_grad():\n        for videos, labels in val_loader:\n            videos, labels = videos.to(DEVICE), labels.to(DEVICE)\n            outputs = model(videos)\n            loss = criterion(outputs, labels)\n            val_loss += loss.item()\n            _, predicted = outputs.max(1)\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n    val_accuracy = 100 * correct / total\n    return val_loss / len(val_loader), val_accuracy\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:45:07.549225Z","iopub.execute_input":"2025-02-26T10:45:07.549617Z","iopub.status.idle":"2025-02-26T10:45:07.558426Z","shell.execute_reply.started":"2025-02-26T10:45:07.549576Z","shell.execute_reply":"2025-02-26T10:45:07.557654Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"train_model(model, train_loader, val_loader, optimizer, criterion, epochs=EPOCHS)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:45:07.56037Z","iopub.execute_input":"2025-02-26T10:45:07.560619Z","iopub.status.idle":"2025-02-26T10:48:10.651255Z","shell.execute_reply.started":"2025-02-26T10:45:07.560599Z","shell.execute_reply":"2025-02-26T10:48:10.650205Z"}},"outputs":[{"name":"stderr","text":"Epoch [1/10]: 100%|██████████| 93/93 [00:16<00:00,  5.60it/s, acc=93.6, loss=0.0927]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1: Train Loss = 0.2184, Train Accuracy = 93.65%, Val Loss = 0.7204, Val Accuracy = 68.66%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [2/10]: 100%|██████████| 93/93 [00:16<00:00,  5.61it/s, acc=94.6, loss=0.173] \n","output_type":"stream"},{"name":"stdout","text":"Epoch 2: Train Loss = 0.1793, Train Accuracy = 94.59%, Val Loss = 0.7099, Val Accuracy = 68.66%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [3/10]: 100%|██████████| 93/93 [00:16<00:00,  5.57it/s, acc=95.4, loss=0.0468]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 3: Train Loss = 0.1594, Train Accuracy = 95.41%, Val Loss = 0.6201, Val Accuracy = 73.88%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [4/10]: 100%|██████████| 93/93 [00:16<00:00,  5.61it/s, acc=95.5, loss=0.068] \n","output_type":"stream"},{"name":"stdout","text":"Epoch 4: Train Loss = 0.1480, Train Accuracy = 95.54%, Val Loss = 0.7220, Val Accuracy = 68.66%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [5/10]: 100%|██████████| 93/93 [00:16<00:00,  5.61it/s, acc=95.8, loss=0.0971]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 5: Train Loss = 0.1306, Train Accuracy = 95.81%, Val Loss = 0.7186, Val Accuracy = 72.39%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [6/10]: 100%|██████████| 93/93 [00:16<00:00,  5.57it/s, acc=96.5, loss=0.114] \n","output_type":"stream"},{"name":"stdout","text":"Epoch 6: Train Loss = 0.1164, Train Accuracy = 96.49%, Val Loss = 0.8288, Val Accuracy = 67.16%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [7/10]: 100%|██████████| 93/93 [00:16<00:00,  5.60it/s, acc=96.9, loss=0.0554]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 7: Train Loss = 0.1075, Train Accuracy = 96.89%, Val Loss = 0.6824, Val Accuracy = 73.13%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [8/10]: 100%|██████████| 93/93 [00:16<00:00,  5.60it/s, acc=97.8, loss=0.0263]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 8: Train Loss = 0.0827, Train Accuracy = 97.84%, Val Loss = 0.6291, Val Accuracy = 75.37%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [9/10]: 100%|██████████| 93/93 [00:16<00:00,  5.59it/s, acc=98.9, loss=0.0299] \n","output_type":"stream"},{"name":"stdout","text":"Epoch 9: Train Loss = 0.0678, Train Accuracy = 98.92%, Val Loss = 0.6765, Val Accuracy = 73.88%, Learning Rate = 0.000100\n","output_type":"stream"},{"name":"stderr","text":"Epoch [10/10]: 100%|██████████| 93/93 [00:16<00:00,  5.60it/s, acc=98.9, loss=0.0123] \n","output_type":"stream"},{"name":"stdout","text":"Epoch 10: Train Loss = 0.0622, Train Accuracy = 98.92%, Val Loss = 0.7344, Val Accuracy = 75.37%, Learning Rate = 0.000100\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"def evaluate_model(model, test_loader):\n    model.eval()\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for videos, labels in tqdm(test_loader):\n            videos, labels = videos.to(DEVICE), labels.to(DEVICE)\n            outputs = model(videos)\n            _, predicted = outputs.max(1)\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n    accuracy = 100 * correct / total\n    print(f\"Test Accuracy: {accuracy:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:48:27.971114Z","iopub.execute_input":"2025-02-26T10:48:27.971432Z","iopub.status.idle":"2025-02-26T10:48:27.976469Z","shell.execute_reply.started":"2025-02-26T10:48:27.971406Z","shell.execute_reply":"2025-02-26T10:48:27.975655Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"import torch\nimport numpy as np\nimport cv2\nimport os\nfrom tqdm import tqdm\n\n# Load video frames from a directory using OpenCV\ndef load_video_frames(frame_folder, num_frames=16):\n    frames = []\n    \n    # Get all frame image file paths, sorted in correct order\n    frame_paths = sorted([os.path.join(frame_folder, f) for f in os.listdir(frame_folder) if f.endswith(('.png', '.jpg', '.jpeg'))])\n\n    if len(frame_paths) < num_frames:\n        return None  # Skip if not enough frames\n    \n    for frame_path in frame_paths[:num_frames]:  # Limit to `num_frames`\n        frame = cv2.imread(frame_path)  # Read frame\n        if frame is None:\n            continue  # Skip corrupt frames\n\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert BGR → RGB\n        frame = cv2.resize(frame, (224, 224))  # Resize to match model input\n        frames.append(frame)\n\n    if len(frames) < num_frames:\n        return None  # Skip incomplete videos\n\n    frames = np.stack(frames, axis=0)  # Stack into tensor\n    frames = torch.tensor(frames).permute(0, 3, 1, 2).float() / 255.0  # Normalize\n    return frames\n\n# Model evaluation function\ndef evaluate_model(model, test_loader, device=\"cuda\" if torch.cuda.is_available() else \"cpu\"):\n    model.eval()\n    correct = 0\n    total = 0\n    \n    with torch.no_grad():\n        for batch in tqdm(test_loader, desc=\"Evaluating\"):\n            batch_videos = []\n            batch_labels = []\n            \n            for frame_folder, label in batch:\n                frames = load_video_frames(frame_folder)  # Load frames with OpenCV\n                if frames is None:  \n                    continue  # Skip invalid video\n\n                batch_videos.append(frames)\n                batch_labels.append(label)\n\n            if len(batch_videos) == 0:\n                continue  # Skip empty batch\n\n            videos = torch.stack(batch_videos).to(device)\n            labels = torch.tensor(batch_labels).to(device)\n\n            outputs = model(videos)\n            _, predicted = torch.max(outputs, 1)\n\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n    accuracy = 100 * correct / total\n    print(f\"Test Accuracy: {accuracy:.2f}%\")\n    \n    return accuracy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:48:30.311008Z","iopub.execute_input":"2025-02-26T10:48:30.311343Z","iopub.status.idle":"2025-02-26T10:48:30.320475Z","shell.execute_reply.started":"2025-02-26T10:48:30.311316Z","shell.execute_reply":"2025-02-26T10:48:30.319453Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# accuracy = evaluate_model(model, test_loader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:48:43.339687Z","iopub.execute_input":"2025-02-26T10:48:43.340042Z","iopub.status.idle":"2025-02-26T10:48:43.343811Z","shell.execute_reply.started":"2025-02-26T10:48:43.340016Z","shell.execute_reply":"2025-02-26T10:48:43.342881Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"import os\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport cv2\nimport numpy as np\nfrom torchvision import transforms, models\nfrom torch.utils.data import Dataset, DataLoader\nimport random\nfrom tqdm import tqdm\nfrom PIL import Image  # Import PIL for image conversion\n\n# Define Constants\nIMG_SIZE = 224\nBATCH_SIZE = 16\nEPOCHS = 30\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Data Transformations\ntransform = transforms.Compose([\n    transforms.Resize((IMG_SIZE, IMG_SIZE)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Normalization for pre-trained models\n])\n\n# Custom Dataset Class for Frame-Based Videos\nclass DeepFakeDataset(Dataset):\n    def __init__(self, frame_paths, labels, transform=None):\n        self.frame_paths = frame_paths\n        self.labels = labels\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.frame_paths)\n\n    def __getitem__(self, idx):\n        frame_path = self.frame_paths[idx]\n        label = self.labels[idx]\n        \n        # Load the frame using OpenCV\n        img = cv2.imread(frame_path)\n        if img is None:\n            return self.__getitem__(random.randint(0, len(self.frame_paths) - 1))  # Skip corrupted images\n        \n        # Convert BGR to RGB\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n        # Convert NumPy array to PIL image\n        img = Image.fromarray(img)\n        \n        # Apply transformations\n        if self.transform:\n            img = self.transform(img)\n        \n        return img, torch.tensor(label, dtype=torch.long)\n\n# Load Dataset (Assuming Flat Structure: dataset/train/fake/ and dataset/train/real/)\ntrain_real_frames = [os.path.join(\"/kaggle/input/1000-videos-split/1000_videos/train/real\", f) for f in os.listdir(\"/kaggle/input/1000-videos-split/1000_videos/train/real\") if f.endswith(('.png', '.jpg', '.jpeg'))]\ntrain_fake_frames = [os.path.join(\"/kaggle/input/1000-videos-split/1000_videos/train/fake\", f) for f in os.listdir(\"/kaggle/input/1000-videos-split/1000_videos/train/fake\") if f.endswith(('.png', '.jpg', '.jpeg'))]\n\nval_real_frames = [os.path.join(\"/kaggle/input/1000-videos-split/1000_videos/validation/real\", f) for f in os.listdir(\"/kaggle/input/1000-videos-split/1000_videos/validation/real\") if f.endswith(('.png', '.jpg', '.jpeg'))]\nval_fake_frames = [os.path.join(\"/kaggle/input/1000-videos-split/1000_videos/validation/fake\", f) for f in os.listdir(\"/kaggle/input/1000-videos-split/1000_videos/validation/fake\") if f.endswith(('.png', '.jpg', '.jpeg'))]\n\ntrain_frames = train_real_frames + train_fake_frames\ntrain_labels = [0] * len(train_real_frames) + [1] * len(train_fake_frames)  # 0 = Real, 1 = Fake\n\nval_frames = val_real_frames + val_fake_frames\nval_labels = [0] * len(val_real_frames) + [1] * len(val_fake_frames)\n\n# Shuffle Data\ncombined_train = list(zip(train_frames, train_labels))\nrandom.shuffle(combined_train)\ntrain_frames, train_labels = zip(*combined_train)\n\ncombined_val = list(zip(val_frames, val_labels))\nrandom.shuffle(combined_val)\nval_frames, val_labels = zip(*combined_val)\n\n# Create Dataloaders\ntrain_dataset = DeepFakeDataset(train_frames, train_labels, transform)\nval_dataset = DeepFakeDataset(val_frames, val_labels, transform)\n\ntrain_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\nval_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)\n\nprint(f\"Loaded {len(train_dataset)} training frames and {len(val_dataset)} validation frames.\")\n\n# Define Model (ResNet-18)\nclass ResNetDeepFakeDetector(nn.Module):\n    def __init__(self, num_classes=2):\n        super(ResNetDeepFakeDetector, self).__init__()\n        self.resnet = models.resnet18(pretrained=True)  # Load pre-trained ResNet-18\n        self.resnet.fc = nn.Linear(self.resnet.fc.in_features, num_classes)  # Modify the final layer for binary classification\n\n    def forward(self, x):\n        return self.resnet(x)\n\n# Initialize Model\nmodel = ResNetDeepFakeDetector().to(DEVICE)\n\n# Loss and Optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=1e-4)\n\n# Validation Function\ndef validate_model(model, val_loader, criterion):\n    model.eval()  # Set the model to evaluation mode\n    val_loss = 0\n    correct = 0\n    total = 0\n\n    with torch.no_grad():  # Disable gradient computation\n        for images, labels in val_loader:\n            images, labels = images.to(DEVICE), labels.to(DEVICE)\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n            val_loss += loss.item()\n            _, predicted = outputs.max(1)  # Get the predicted class\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n    val_accuracy = 100 * correct / total\n    return val_loss / len(val_loader), val_accuracy\n\n# Training Function with Validation\ndef train_model(model, train_loader, val_loader, optimizer, criterion, epochs=EPOCHS):\n    for epoch in range(epochs):\n        model.train()\n        epoch_loss = 0\n        correct = 0\n        total = 0\n        loop = tqdm(train_loader, leave=True)\n        \n        for images, labels in loop:\n            images, labels = images.to(DEVICE), labels.to(DEVICE)\n\n            optimizer.zero_grad()\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n\n            epoch_loss += loss.item()\n            _, predicted = outputs.max(1)\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n            loop.set_description(f\"Epoch [{epoch+1}/{epochs}]\")\n            loop.set_postfix(loss=loss.item(), acc=100 * correct / total)\n\n        train_accuracy = 100 * correct / total\n        train_loss = epoch_loss / len(train_loader)\n\n        # Validation Step\n        val_loss, val_accuracy = validate_model(model, val_loader, criterion)\n\n        print(f\"Epoch {epoch+1}: Train Loss = {train_loss:.4f}, Train Accuracy = {train_accuracy:.2f}%, \"\n              f\"Val Loss = {val_loss:.4f}, Val Accuracy = {val_accuracy:.2f}%\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:49:21.963045Z","iopub.execute_input":"2025-02-26T10:49:21.963344Z","iopub.status.idle":"2025-02-26T10:49:22.224883Z","shell.execute_reply.started":"2025-02-26T10:49:21.963322Z","shell.execute_reply":"2025-02-26T10:49:22.223868Z"}},"outputs":[{"name":"stdout","text":"Loaded 11633 training frames and 2400 validation frames.\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"\n# Train Model\ntrain_model(model, train_loader, val_loader, optimizer, criterion, epochs=EPOCHS)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:49:25.709621Z","iopub.execute_input":"2025-02-26T10:49:25.709998Z","iopub.status.idle":"2025-02-26T11:51:41.635265Z","shell.execute_reply.started":"2025-02-26T10:49:25.709968Z","shell.execute_reply":"2025-02-26T11:51:41.634301Z"}},"outputs":[{"name":"stderr","text":"Epoch [1/30]: 100%|██████████| 728/728 [02:48<00:00,  4.33it/s, acc=92.3, loss=0.872]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 1: Train Loss = 0.1853, Train Accuracy = 92.25%, Val Loss = 0.1551, Val Accuracy = 94.12%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [2/30]: 100%|██████████| 728/728 [01:50<00:00,  6.62it/s, acc=97.2, loss=0.477]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 2: Train Loss = 0.0661, Train Accuracy = 97.23%, Val Loss = 0.2086, Val Accuracy = 93.21%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [3/30]: 100%|██████████| 728/728 [01:48<00:00,  6.72it/s, acc=97.7, loss=0.994]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 3: Train Loss = 0.0549, Train Accuracy = 97.70%, Val Loss = 0.1875, Val Accuracy = 93.25%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [4/30]: 100%|██████████| 728/728 [01:50<00:00,  6.59it/s, acc=98.5, loss=0.598]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 4: Train Loss = 0.0356, Train Accuracy = 98.48%, Val Loss = 0.2495, Val Accuracy = 90.88%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [5/30]: 100%|██████████| 728/728 [01:48<00:00,  6.69it/s, acc=98.5, loss=0.88]    \n","output_type":"stream"},{"name":"stdout","text":"Epoch 5: Train Loss = 0.0324, Train Accuracy = 98.50%, Val Loss = 0.1360, Val Accuracy = 95.08%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [6/30]: 100%|██████████| 728/728 [01:48<00:00,  6.73it/s, acc=98.3, loss=0.256]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 6: Train Loss = 0.0363, Train Accuracy = 98.29%, Val Loss = 0.1700, Val Accuracy = 93.38%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [7/30]: 100%|██████████| 728/728 [01:47<00:00,  6.74it/s, acc=98.3, loss=0.389]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 7: Train Loss = 0.0395, Train Accuracy = 98.32%, Val Loss = 0.2546, Val Accuracy = 91.29%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [8/30]: 100%|██████████| 728/728 [01:47<00:00,  6.77it/s, acc=98.8, loss=0.0299]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 8: Train Loss = 0.0257, Train Accuracy = 98.75%, Val Loss = 0.3881, Val Accuracy = 92.88%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [9/30]: 100%|██████████| 728/728 [01:50<00:00,  6.62it/s, acc=98.7, loss=0.0805]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 9: Train Loss = 0.0262, Train Accuracy = 98.72%, Val Loss = 0.2877, Val Accuracy = 91.58%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [10/30]: 100%|██████████| 728/728 [01:48<00:00,  6.72it/s, acc=98.5, loss=0.275]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 10: Train Loss = 0.0347, Train Accuracy = 98.52%, Val Loss = 0.1905, Val Accuracy = 93.58%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [11/30]: 100%|██████████| 728/728 [01:48<00:00,  6.69it/s, acc=99.1, loss=0.0899]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 11: Train Loss = 0.0145, Train Accuracy = 99.15%, Val Loss = 0.2530, Val Accuracy = 92.75%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [12/30]: 100%|██████████| 728/728 [01:59<00:00,  6.10it/s, acc=98.7, loss=0.0403]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 12: Train Loss = 0.0250, Train Accuracy = 98.69%, Val Loss = 0.1984, Val Accuracy = 94.17%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [13/30]: 100%|██████████| 728/728 [01:58<00:00,  6.14it/s, acc=98.6, loss=1.09]    \n","output_type":"stream"},{"name":"stdout","text":"Epoch 13: Train Loss = 0.0282, Train Accuracy = 98.62%, Val Loss = 0.2473, Val Accuracy = 91.75%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [14/30]: 100%|██████████| 728/728 [01:51<00:00,  6.53it/s, acc=98.9, loss=0.168]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 14: Train Loss = 0.0192, Train Accuracy = 98.92%, Val Loss = 0.1290, Val Accuracy = 95.04%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [15/30]: 100%|██████████| 728/728 [01:49<00:00,  6.66it/s, acc=98.8, loss=0.196]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 15: Train Loss = 0.0262, Train Accuracy = 98.81%, Val Loss = 0.1660, Val Accuracy = 93.38%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [16/30]: 100%|██████████| 728/728 [01:51<00:00,  6.53it/s, acc=99.1, loss=0.173]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 16: Train Loss = 0.0167, Train Accuracy = 99.09%, Val Loss = 0.1360, Val Accuracy = 94.79%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [17/30]: 100%|██████████| 728/728 [01:51<00:00,  6.50it/s, acc=98.7, loss=0.0897]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 17: Train Loss = 0.0280, Train Accuracy = 98.70%, Val Loss = 0.1372, Val Accuracy = 95.42%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [18/30]: 100%|██████████| 728/728 [01:50<00:00,  6.60it/s, acc=99, loss=0.0307]    \n","output_type":"stream"},{"name":"stdout","text":"Epoch 18: Train Loss = 0.0208, Train Accuracy = 98.96%, Val Loss = 0.2135, Val Accuracy = 92.67%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [19/30]: 100%|██████████| 728/728 [01:48<00:00,  6.68it/s, acc=99.2, loss=0.567]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 19: Train Loss = 0.0155, Train Accuracy = 99.17%, Val Loss = 0.1968, Val Accuracy = 94.00%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [20/30]: 100%|██████████| 728/728 [01:48<00:00,  6.73it/s, acc=99.1, loss=0.0538]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 20: Train Loss = 0.0183, Train Accuracy = 99.06%, Val Loss = 0.2685, Val Accuracy = 91.54%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [21/30]: 100%|██████████| 728/728 [01:48<00:00,  6.73it/s, acc=98.9, loss=0.0123]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 21: Train Loss = 0.0211, Train Accuracy = 98.93%, Val Loss = 0.2427, Val Accuracy = 91.17%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [22/30]: 100%|██████████| 728/728 [01:48<00:00,  6.72it/s, acc=99.1, loss=1.43]    \n","output_type":"stream"},{"name":"stdout","text":"Epoch 22: Train Loss = 0.0169, Train Accuracy = 99.08%, Val Loss = 0.2851, Val Accuracy = 92.83%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [23/30]: 100%|██████████| 728/728 [01:50<00:00,  6.61it/s, acc=98.9, loss=0.396]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 23: Train Loss = 0.0219, Train Accuracy = 98.87%, Val Loss = 0.2092, Val Accuracy = 92.75%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [24/30]: 100%|██████████| 728/728 [01:48<00:00,  6.73it/s, acc=99.3, loss=0.544]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 24: Train Loss = 0.0131, Train Accuracy = 99.29%, Val Loss = 0.1534, Val Accuracy = 95.00%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [25/30]: 100%|██████████| 728/728 [01:47<00:00,  6.77it/s, acc=98.9, loss=0.414]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 25: Train Loss = 0.0252, Train Accuracy = 98.91%, Val Loss = 0.2419, Val Accuracy = 92.42%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [26/30]: 100%|██████████| 728/728 [01:47<00:00,  6.79it/s, acc=99.3, loss=0.18]    \n","output_type":"stream"},{"name":"stdout","text":"Epoch 26: Train Loss = 0.0126, Train Accuracy = 99.35%, Val Loss = 0.1959, Val Accuracy = 93.92%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [27/30]: 100%|██████████| 728/728 [01:47<00:00,  6.77it/s, acc=99, loss=1.84]      \n","output_type":"stream"},{"name":"stdout","text":"Epoch 27: Train Loss = 0.0234, Train Accuracy = 99.01%, Val Loss = 0.2896, Val Accuracy = 92.08%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [28/30]: 100%|██████████| 728/728 [01:48<00:00,  6.74it/s, acc=99.2, loss=0.072]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 28: Train Loss = 0.0154, Train Accuracy = 99.18%, Val Loss = 0.1860, Val Accuracy = 94.79%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [29/30]: 100%|██████████| 728/728 [01:47<00:00,  6.75it/s, acc=99.2, loss=0.363]   \n","output_type":"stream"},{"name":"stdout","text":"Epoch 29: Train Loss = 0.0155, Train Accuracy = 99.21%, Val Loss = 0.2147, Val Accuracy = 94.21%\n","output_type":"stream"},{"name":"stderr","text":"Epoch [30/30]: 100%|██████████| 728/728 [01:47<00:00,  6.79it/s, acc=99.1, loss=1.06]    \n","output_type":"stream"},{"name":"stdout","text":"Epoch 30: Train Loss = 0.0250, Train Accuracy = 99.08%, Val Loss = 0.6328, Val Accuracy = 84.58%\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"# Load Test Dataset (Assuming Flat Structure: dataset/test/fake/ and dataset/test/real/)\ntest_real_frames = [os.path.join(\"/kaggle/input/1000-videos-split/1000_videos/test/real\", f) for f in os.listdir(\"/kaggle/input/1000-videos-split/1000_videos/test/real\") if f.endswith(('.png', '.jpg', '.jpeg'))]\ntest_fake_frames = [os.path.join(\"/kaggle/input/1000-videos-split/1000_videos/test/fake\", f) for f in os.listdir(\"/kaggle/input/1000-videos-split/1000_videos/test/fake\") if f.endswith(('.png', '.jpg', '.jpeg'))]\n\ntest_frames = test_real_frames + test_fake_frames\ntest_labels = [0] * len(test_real_frames) + [1] * len(test_fake_frames)  # 0 = Real, 1 = Fake\n\n# Shuffle Test Data\ncombined_test = list(zip(test_frames, test_labels))\nrandom.shuffle(combined_test)\ntest_frames, test_labels = zip(*combined_test)\n\n# Create Test Dataloader\ntest_dataset = DeepFakeDataset(test_frames, test_labels, transform)\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)\n\nprint(f\"Loaded {len(test_dataset)} test frames.\")\n\n# Evaluation Function\ndef evaluate_model(model, test_loader):\n    model.eval()  # Set the model to evaluation mode\n    correct = 0\n    total = 0\n    all_preds = []\n    all_labels = []\n\n    with torch.no_grad():  # Disable gradient computation\n        for images, labels in tqdm(test_loader, desc=\"Evaluating\"):\n            images, labels = images.to(DEVICE), labels.to(DEVICE)\n            outputs = model(images)\n            _, predicted = torch.max(outputs, 1)  # Get the predicted class\n\n            # Collect predictions and labels\n            all_preds.extend(predicted.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n\n            # Calculate accuracy\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n\n    # Calculate overall accuracy\n    accuracy = 100 * correct / total\n    print(f\"Test Accuracy: {accuracy:.2f}%\")\n\n    return all_preds, all_labels, accuracy\n\n# Evaluate the Model on the Test Dataset\nall_preds, all_labels, test_accuracy = evaluate_model(model, test_loader)\n\n# Print Confusion Matrix (Optional)\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Compute confusion matrix\ncm = confusion_matrix(all_labels, all_preds)\n\n# Plot confusion matrix\nplt.figure(figsize=(6, 4))\nsns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[\"Real\", \"Fake\"], yticklabels=[\"Real\", \"Fake\"])\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T12:12:49.946085Z","iopub.execute_input":"2025-02-26T12:12:49.946421Z","iopub.status.idle":"2025-02-26T12:13:28.354021Z","shell.execute_reply.started":"2025-02-26T12:12:49.946392Z","shell.execute_reply":"2025-02-26T12:13:28.35303Z"}},"outputs":[{"name":"stdout","text":"Loaded 2400 test frames.\n","output_type":"stream"},{"name":"stderr","text":"Evaluating: 100%|██████████| 150/150 [00:37<00:00,  3.97it/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 83.58%\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"# Save the Model\ndef save_model(model, optimizer, epoch, path=\"deepfake_resnet18.pth\"):\n    \"\"\"\n    Save the model's state dictionary, optimizer state, and current epoch.\n    \"\"\"\n    torch.save({\n        'epoch': epoch,\n        'model_state_dict': model.state_dict(),\n        'optimizer_state_dict': optimizer.state_dict(),\n    }, path)\n    print(f\"Model saved to {path}\")\n\n# Train Model\n# We will first train separately and the only save\n# train_model(model, train_loader, val_loader, optimizer, criterion, epochs=EPOCHS)\n\n# Save the trained model\nsave_model(model, optimizer, EPOCHS, \"deepfake_resnet18.pth\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-26T08:22:46.36Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Load the trained model","metadata":{}},{"cell_type":"code","source":"# Load the saved model\ndef load_model(model, optimizer, path=\"deepfake_resnet18.pth\"):\n    \"\"\"\n    Load the model's state dictionary, optimizer state, and epoch.\n    \"\"\"\n    checkpoint = torch.load(path)\n    model.load_state_dict(checkpoint['model_state_dict'])\n    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n    epoch = checkpoint['epoch']\n    print(f\"Model loaded from {path} (epoch {epoch})\")\n    return model, optimizer, epoch\n\n# Initialize a new model and optimizer\nloaded_model = ResNetDeepFakeDetector().to(DEVICE)\nloaded_optimizer = optim.Adam(loaded_model.parameters(), lr=1e-4)\n\n# Load the saved model\nloaded_model, loaded_optimizer, epoch = load_model(loaded_model, loaded_optimizer, \"deepfake_resnet18.pth\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-26T08:22:46.36Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Preprocess the input","metadata":{}},{"cell_type":"code","source":"from torchvision import transforms\nfrom PIL import Image\n\n# Define the same transformations used during training\ntransform = transforms.Compose([\n    transforms.Resize((IMG_SIZE, IMG_SIZE)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-26T08:22:46.36Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Predict on a video","metadata":{}},{"cell_type":"code","source":"import cv2\n\ndef predict_video(video_path, model, transform, frame_interval=10):\n    \"\"\"\n    Predict whether each frame in a video is real or fake.\n    \"\"\"\n    # Open the video file\n    cap = cv2.VideoCapture(video_path)\n    if not cap.isOpened():\n        print(f\"Error: Could not open video {video_path}\")\n        return\n\n    frame_count = 0\n    while True:\n        ret, frame = cap.read()\n        if not ret:\n            break  # End of video\n\n        # Process every `frame_interval` frames\n        if frame_count % frame_interval == 0:\n            # Convert the frame to RGB\n            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n            frame_pil = Image.fromarray(frame_rgb)\n\n            # Preprocess the frame\n            frame_tensor = transform(frame_pil).unsqueeze(0).to(DEVICE)\n\n            # Make prediction\n            with torch.no_grad():\n                output = model(frame_tensor)\n                _, predicted = torch.max(output, 1)\n                prediction = \"Fake\" if predicted.item() == 1 else \"Real\"\n\n            # Display the prediction on the frame\n            cv2.putText(frame, f\"Prediction: {prediction}\", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)\n            cv2.imshow(\"Frame\", frame)\n\n            # Exit if 'q' is pressed\n            if cv2.waitKey(1) & 0xFF == ord('q'):\n                break\n\n        frame_count += 1\n\n    # Release the video capture object and close windows\n    cap.release()\n    cv2.destroyAllWindows()\n\n# Test the video prediction function\nvideo_path = \"/kaggle/input/test-input/bwdmzwhdnw.mp4\"  # Replace with the path to your video\npredict_video(video_path, loaded_model, transform, frame_interval=10)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-26T08:22:46.361Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import transforms, models\nfrom PIL import Image\n\n# Define Constants\nIMG_SIZE = 128  # Reduce image size\nBATCH_SIZE = 4  # Reduce batch size\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Define the same transformations used during training\ntransform = transforms.Compose([\n    transforms.Resize((IMG_SIZE, IMG_SIZE)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])\n\n# Load the saved model\ndef load_model(model, optimizer, path=\"deepfake_resnet18.pth\"):\n    \"\"\"\n    Load the model's state dictionary, optimizer state, and epoch.\n    \"\"\"\n    checkpoint = torch.load(path)\n    model.load_state_dict(checkpoint['model_state_dict'])\n    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n    epoch = checkpoint['epoch']\n    print(f\"Model loaded from {path} (epoch {epoch})\")\n    return model, optimizer, epoch\n\n# Initialize a new model and optimizer\nprint(\"Initializing model...\")\nloaded_model = ResNetDeepFakeDetector().to(DEVICE)\nloaded_optimizer = optim.Adam(loaded_model.parameters(), lr=1e-4)\n\n# Load the saved model\nprint(\"Loading model...\")\nloaded_model, loaded_optimizer, epoch = load_model(loaded_model, loaded_optimizer, \"deepfake_resnet18.pth\")\n\n# Predict on a single image\ndef predict(image_path, model, transform):\n    \"\"\"\n    Predict whether an image is real or fake.\n    \"\"\"\n    print(f\"Loading image: {image_path}\")\n    img = Image.open(image_path).convert(\"RGB\")  # Ensure the image is in RGB format\n    print(\"Image loaded.\")\n\n    print(\"Preprocessing image...\")\n    img = transform(img).unsqueeze(0).to(DEVICE)  # Add batch dimension and move to device\n    print(\"Image preprocessed.\")\n\n    # Set the model to evaluation mode\n    model.eval()\n\n    # Make prediction\n    print(\"Making prediction...\")\n    with torch.no_grad():\n        output = model(img)\n        _, predicted = torch.max(output, 1)\n    \n    return \"Fake\" if predicted.item() == 1 else \"Real\"\n\n# Test the prediction function\nimage_path = \"/kaggle/input/image2/Screenshot 2025-02-22 072822.jpg\"  # Replace with the path to your image\nprint(f\"Predicting on image: {image_path}\")\nprediction = predict(image_path, loaded_model, transform)\nprint(f\"Prediction: {prediction}\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-26T08:22:46.361Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import transforms, models\n\n# Define Constants\nIMG_SIZE = 224\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Define the same transformations used during training\ntransform = transforms.Compose([\n    transforms.Resize((IMG_SIZE, IMG_SIZE)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])\n\n# Define the model architecture\nclass ResNetDeepFakeDetector(nn.Module):\n    def __init__(self, num_classes=2):\n        super(ResNetDeepFakeDetector, self).__init__()\n        self.resnet = models.resnet18(pretrained=True)\n        self.resnet.fc = nn.Linear(self.resnet.fc.in_features, num_classes)\n\n    def forward(self, x):\n        return self.resnet(x)\n\n# Load the saved model\ndef load_model(model, optimizer, path=\"deepfake_resnet18.pth\"):\n    \"\"\"\n    Load the model's state dictionary, optimizer state, and epoch.\n    \"\"\"\n    checkpoint = torch.load(path)\n    model.load_state_dict(checkpoint['model_state_dict'])\n    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n    epoch = checkpoint['epoch']\n    print(f\"Model loaded from {path} (epoch {epoch})\")\n    return model, optimizer, epoch\n\n# Initialize a new model and optimizer\nprint(\"Initializing model...\")\nloaded_model = ResNetDeepFakeDetector().to(DEVICE)\nloaded_optimizer = optim.Adam(loaded_model.parameters(), lr=1e-4)\n\n# Load the saved model\nprint(\"Loading model...\")\nloaded_model, loaded_optimizer, epoch = load_model(loaded_model, loaded_optimizer, \"deepfake_resnet18.pth\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-26T08:22:46.361Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import cv2\nfrom PIL import Image\n\ndef predict_video(video_path, model, transform, frame_interval=10):\n    \"\"\"\n    Predict whether each frame in a video is real or fake.\n    \"\"\"\n    # Open the video file\n    cap = cv2.VideoCapture(video_path)\n    if not cap.isOpened():\n        print(f\"Error: Could not open video {video_path}\")\n        return\n\n    frame_count = 0\n    while True:\n        ret, frame = cap.read()\n        if not ret:\n            break  # End of video\n\n        # Process every `frame_interval` frames\n        if frame_count % frame_interval == 0:\n            # Convert the frame to RGB\n            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n            frame_pil = Image.fromarray(frame_rgb)\n\n            # Preprocess the frame\n            frame_tensor = transform(frame_pil).unsqueeze(0).to(DEVICE)\n\n            # Make prediction\n            with torch.no_grad():\n                output = model(frame_tensor)\n                _, predicted = torch.max(output, 1)\n                prediction = \"Fake\" if predicted.item() == 1 else \"Real\"\n\n            # Display the prediction on the frame\n            cv2.putText(frame, f\"Prediction: {prediction}\", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)\n            cv2.imshow(\"Frame\", frame)\n\n            # Exit if 'q' is pressed\n            if cv2.waitKey(1) & 0xFF == ord('q'):\n                break\n\n        frame_count += 1\n\n    # Release the video capture object and close windows\n    cap.release()\n    cv2.destroyAllWindows()\n\n# Test the video prediction function\nvideo_path = \"/kaggle/input/test-input/bwdmzwhdnw.mp4\"  # Replace with the path to your video\npredict_video(video_path, loaded_model, transform, frame_interval=10)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-26T08:22:46.361Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}